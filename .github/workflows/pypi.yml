name: Build Wheels + PyPI deploy

on:
  workflow_dispatch:
    inputs:
      deploy_to_testpypi:
        description: "Whether the build should be deployed to test.pypi.org"
        required: true
        default: "false"
      deploy_to_pypi:
        description: "Whether the build should be deployed to pypi.org"
        required: true
        default: "true"

jobs:
  # build-wheels:
  #   name: Build wheels on ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}

  #   strategy:
  #     matrix:
  #       include:
  #         - os: ubuntu-20.04
  #           arch: "x86_64"
  #         - os: windows-2019
  #           arch: "x86"
  #         - os: windows-2019
  #           arch: "AMD64"
  #         - os: macos-10.15
  #           arch: "x86_64"
  #         - os: windows-2019


  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: 'recursive'

  #   - name: Build wheels (arch=${{ matrix.arch }})
  #     uses: pypa/cibuildwheel@v2.2.2
  #     env:
  #       CIBW_ARCHS: "${{ matrix.arch }}"

  #   - uses: actions/upload-artifact@v2
  #     with:
  #       path: ./wheelhouse/*.whl

  build-msys:
    name: Build msys2 wheels
    runs-on: windows-2019
    defaults:
      run:
        shell: msys2 {0}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake make

    - run: |
        PYDIR=$(ls -d /c/hostedtoolcache/windows/Python/3.9.*)
        export PATH="$PYDIR/x64:$PYDIR/x64/Scripts:$PATH"
        echo "PATH=$PATH"
        python -m pip install cibuildwheel
        python -m cibuildwheel --output-dir wheelhouse

    - uses: actions/upload-artifact@v2
      with:
        path: ./wheelhouse/*.whl

  # build-sdist:
  #   name: Build source distribution
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: 'recursive'

  #     - name: Build SDist
  #       run: pipx run build --sdist

  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: artifact
  #         path: dist/*.tar.gz

  # test-sdist:
  #   name: Test source distribution on ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   needs: [build-sdist]
  #   strategy:
  #     matrix:
  #       os:
  #         - ubuntu-20.04
  #         - windows-2019
  #         - macos-10.15

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: 'recursive'

  #     - uses: actions/setup-python@v2
  #       name: Install Python
  #       with:
  #         python-version: '3.9'

  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: artifact
  #         path: dist

  #     - name: Install OpenMP
  #       if: runner.os == 'macOS'
  #       run: brew install libomp

  #     - name: Install from SDist
  #       shell: bash
  #       run:
  #         python -m pip install dist/*.tar.gz

  #     - name: Install test requirements
  #       run:
  #         python -m pip install -r requirements-dev.txt

  #     - name: Run test suite
  #       run:
  #         python -m pytest

  # upload_testpypi:
  #   needs: [build-sdist, test-sdist, build-wheels]
  #   runs-on: ubuntu-latest
  #   if: github.repository_owner == 'ssciwr'
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: artifact
  #         path: dist

  #     - uses: pypa/gh-action-pypi-publish@master
  #       if: github.event.inputs.deploy_to_testpypi == 'true'
  #       with:
  #         user: __token__
  #         password: ${{ secrets.TESTPYPI_API_TOKEN }}
  #         repository_url: https://test.pypi.org/legacy/

  # upload_pypi:
  #   needs: [build-sdist, build-wheels, upload_testpypi]
  #   runs-on: ubuntu-latest
  #   if: github.repository_owner == 'ssciwr'
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: artifact
  #         path: dist

  #     - uses: pypa/gh-action-pypi-publish@master
  #       if: github.event.inputs.deploy_to_pypi == 'true'
  #       with:
  #         user: __token__
  #         password: ${{ secrets.PYPI_API_TOKEN }}
