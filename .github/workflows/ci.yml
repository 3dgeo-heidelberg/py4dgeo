name: CI

on:
  # We run CI on pushes to the main branch
  push:
    branches:
      - main
  # and on all pull requests to the main branch
  pull_request:
    branches:
      - main
  # as well as upon manual triggers through the 'Actions' tab of the Github UI
  workflow_dispatch:

jobs:
  build-and-test:
    name: Testing on ${{matrix.os}}
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-10.15, windows-2019]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: make build directory
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: configure cmake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Debug -DBUILD_DOCS=OFF

    - name: build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build .

    - name: run tests
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest

    - name: Install Python package and development requirements
      run: |
        python -m pip install -r requirements-dev.txt
        python -m pip install .

    - name: Run Python tests
      run: |
        python -m pytest

  coverage-test:
    name: Coverage Testing
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install LCov
      run: |
        sudo apt-get install -y lcov

    - name: Install Python package and development requirements
      run: |
        python -m pip install -r requirements-dev.txt
        python -m pip install --editable .

    - name: make build directory
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: configure cmake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage" -DBUILD_DOCS=OFF

    - name: build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build .

    - name: run tests
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest

    - name: collect coverage report
      shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        lcov --directory ./build --capture --output-file coverage.info
        python -m lcov_cobertura coverage.info -o coverage2.xml

    - name: Run coverage tests
      run: |
        python -m pytest --cov=src --cov-report=xml

    - name: Upload coverage to Codecov.io
      working-directory: ${{runner.workspace}}
      run: |
        curl --connect-timeout 10 --retry 5 -Os https://uploader.codecov.io/latest/linux/codecov
        chmod +x codecov
        ./codecov -f py4dgeo/coverage.xml -F python
        ./codecov -f coverage2.xml -F cxx

  address-sanitizer:
    name: Address sanitizer run (C++ only)
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: make build directory
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: configure cmake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=address" -DBUILD_DOCS=OFF

    - name: build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build .

    - name: run tests
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest
